"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeLogglyBulk = require("node-loggly-bulk");

var _nodeLogglyBulk2 = _interopRequireDefault(_nodeLogglyBulk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bunyan2Loggly = function () {
  function Bunyan2Loggly(logglyConfig) {
    var bufferLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var bufferTimeout = arguments[2];
    var callback = arguments[3];

    _classCallCheck(this, Bunyan2Loggly);

    if (!logglyConfig || !logglyConfig.token || !logglyConfig.subdomain) {
      throw new Error("bunyan-loggly requires a config object with token and subdomain");
    }

    logglyConfig.json = true;

    this.logglyClient = _nodeLogglyBulk2.default.createClient(logglyConfig);

    this._buffer = [];
    this.bufferLength = bufferLength;
    this.bufferTimeout = bufferTimeout;
    this.callback = callback || function () {};
  }

  _createClass(Bunyan2Loggly, [{
    key: "write",
    value: function write(data) {
      if ((typeof data === "undefined" ? "undefined" : _typeof(data)) !== "object") {
        throw new Error("bunyan-loggly requires a raw stream. Please define the type as raw when setting up the bunyan stream.");
      }

      // loggly prefers timestamp over time
      if (data.time) {
        data.timestamp = data.time;
        delete data.time;
      }

      this._buffer.push(data);

      this._checkBuffer();
    }
  }, {
    key: "_processBuffer",
    value: function _processBuffer() {
      var _this = this;

      clearTimeout(this._timeoutId);

      var content = this._buffer.slice();

      this._buffer = [];

      if (content.length === 1) {
        var _content = content;

        var _content2 = _slicedToArray(_content, 1);

        content = _content2[0];
      }

      this.logglyClient.log(content, function (error, result) {
        _this.callback(error, result, content);
      });
    }
  }, {
    key: "_checkBuffer",
    value: function _checkBuffer() {
      var _this2 = this;

      if (!this._buffer.length) {
        return;
      }

      if (this._buffer.length >= this.bufferLength) {
        // eslint-disable-next-line consistent-return
        return this._processBuffer();
      }

      if (this.bufferTimeout) {
        clearTimeout(this._timeoutId);
        this._timeoutId = setTimeout(function () {
          _this2._processBuffer();
        }, this.bufferTimeout);
      }
    }
  }]);

  return Bunyan2Loggly;
}();

exports.default = Bunyan2Loggly;
module.exports = exports.default;
module.exports.default = exports.default;