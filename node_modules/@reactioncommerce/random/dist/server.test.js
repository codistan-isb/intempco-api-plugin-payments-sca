"use strict";

var _server = require("./server");

var _server2 = _interopRequireDefault(_server);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test("random ID with seeds", function () {
  // Deterministic with a specified seed, which should generate the
  // same sequence in all environments.
  //
  // For repeatable unit test failures using deterministic random
  // number sequences it's fine if a new Meteor release changes the
  // algorithm being used and it starts generating a different
  // sequence for a seed, as long as the sequence is consistent for
  // a particular release.
  var random = _server2.default.createWithSeeds(0);
  expect(random.id()).toBe("cp9hWvhg8GSvuZ9os");
  expect(random.id()).toBe("3f3k6Xo7rrHCifQhR");
  expect(random.id()).toBe("shxDnjWWmnKPEoLhM");
  expect(random.id()).toBe("6QTjB8C5SEqhmz4ni");
});

// node crypto and window.crypto.getRandomValues() don't let us specify a seed,
// but at least test that the output is in the right format.
test("random format", function () {
  expect(_server2.default.id().length).toBe(17);
  expect(_server2.default.id(29).length).toBe(29);

  var numDigits = 9;
  var hexStr = _server2.default.hexString(numDigits);
  expect(hexStr.length).toBe(numDigits);

  expect(function () {
    parseInt(hexStr, 16);
  }).not.toThrow();

  var randomFraction = _server2.default.fraction();
  expect(randomFraction < 1.0).toBe(true);
  expect(randomFraction >= 0.0).toBe(true);

  expect(_server2.default.secret().length).toBe(43);
  expect(_server2.default.secret(13).length).toBe(13);
});

test("Alea is not used in Node", function () {
  expect(_server2.default.alea).toBe(undefined);
});

test("createWithSeeds requires parameters", function () {
  expect(function () {
    _server2.default.createWithSeeds();
  }).toThrow();
});