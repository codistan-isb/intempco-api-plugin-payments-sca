"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-bitwise, no-plusplus, no-var, id-length */


var _Alea = require("./Alea");

var _Alea2 = _interopRequireDefault(_Alea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UNMISTAKABLE_CHARS = "23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz";
var BASE64_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_";

var RandomGenerator = function () {
  // If seeds are provided, then the alea PRNG will be used, since cryptographic
  // PRNGs (Node crypto and window.crypto.getRandomValues) don't allow us to
  // specify seeds. The caller is responsible for making sure to provide a seed
  // for alea if a csprng is not available.
  function RandomGenerator() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        getRandomValues = _ref.getRandomValues,
        nodeCrypto = _ref.nodeCrypto,
        seeds = _ref.seeds;

    _classCallCheck(this, RandomGenerator);

    if (Array.isArray(seeds)) this.alea = (0, _Alea2.default)(seeds);
    this.getRandomValues = getRandomValues;
    this.nodeCrypto = nodeCrypto;
  }

  _createClass(RandomGenerator, [{
    key: "fraction",
    value: function fraction() {
      if (this.alea) return this.alea();

      if (this.nodeCrypto) {
        var numerator = parseInt(this.hexString(8), 16);
        return numerator * 2.3283064365386963e-10; // 2^-32
      }

      if (this.getRandomValues) {
        var array = new Uint32Array(1);
        this.getRandomValues(array);
        return array[0] * 2.3283064365386963e-10; // 2^-32
      }

      throw new Error("No random generator available");
    }
  }, {
    key: "hexString",
    value: function hexString(digits) {
      if (this.nodeCrypto && !this.alea) {
        var numBytes = Math.ceil(digits / 2);

        // Try to get cryptographically strong randomness. Fall back to
        // non-cryptographically strong if not available.
        var bytes = void 0;
        try {
          bytes = this.nodeCrypto.randomBytes(numBytes);
        } catch (e) {
          // XXX should re-throw any error except insufficient entropy
          bytes = this.nodeCrypto.pseudoRandomBytes(numBytes);
        }

        var result = bytes.toString("hex");

        // If the number of digits is odd, we'll have generated an extra 4 bits
        // of randomness, so we need to trim the last digit.
        return result.substring(0, digits);
      }

      var hexDigits = [];
      for (var i = 0; i < digits; ++i) {
        // eslint-disable-line no-plusplus
        hexDigits.push(this.choice("0123456789abcdef"));
      }
      return hexDigits.join("");
    }
  }, {
    key: "_randomString",
    value: function _randomString(charsCount, alphabet) {
      var digits = [];
      for (var i = 0; i < charsCount; i++) {
        // eslint-disable-line no-plusplus
        digits[i] = this.choice(alphabet);
      }
      return digits.join("");
    }
  }, {
    key: "id",
    value: function id() {
      var charsCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 17;

      // 17 characters is around 96 bits of entropy, which is the amount of
      // state in the Alea PRNG.
      return this._randomString(charsCount, UNMISTAKABLE_CHARS);
    }
  }, {
    key: "secret",
    value: function secret() {
      var charsCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 43;

      // Default to 256 bits of entropy, or 43 characters at 6 bits per
      // character.
      return this._randomString(charsCount, BASE64_CHARS);
    }
  }, {
    key: "choice",
    value: function choice(arrayOrString) {
      var index = Math.floor(this.fraction() * arrayOrString.length);
      if (typeof arrayOrString === "string") return arrayOrString.substr(index, 1);
      return arrayOrString[index];
    }
  }]);

  return RandomGenerator;
}();

exports.default = RandomGenerator;
module.exports = exports.default;
module.exports.default = exports.default;