"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _RandomGenerator = require("./RandomGenerator");

var _RandomGenerator2 = _interopRequireDefault(_RandomGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var crypto = void 0;
var userAgent = void 0;
var innerHeight = void 0;
var innerWidth = void 0;
var documentElement = void 0;
var body = void 0;

if (typeof window !== "undefined") {
  var _window = window;
  crypto = _window.crypto;
  innerHeight = _window.innerHeight;
  innerWidth = _window.innerWidth;
}

if (typeof navigator !== "undefined") {
  var _navigator = navigator;
  userAgent = _navigator.userAgent;
}

if (typeof document !== "undefined") {
  var _document = document;
  body = _document.body;
  documentElement = _document.documentElement;
}

var seeds = void 0;
if (!crypto || !crypto.getRandomValues) {
  // instantiate RNG. Heuristically collect entropy from various sources when a
  // cryptographic PRNG isn't available.
  var agent = userAgent || "";

  var width = innerWidth || documentElement && documentElement.clientWidth || body && body.clientWidth || 1;

  var height = innerHeight || documentElement && documentElement.clientHeight || body && body.clientHeight || 1;

  seeds = [new Date(), height, width, agent, Math.random()];
}

var Random = new _RandomGenerator2.default({
  getRandomValues: crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto),
  seeds: seeds
});

Random.createWithSeeds = function () {
  for (var _len = arguments.length, seedArray = Array(_len), _key = 0; _key < _len; _key++) {
    seedArray[_key] = arguments[_key];
  }

  if (seedArray.length === 0) throw new Error("No seeds were provided");
  return new _RandomGenerator2.default({ seeds: seedArray });
};

exports.default = Random;
module.exports = exports.default;
module.exports.default = exports.default;