"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFactoryForSchema = createFactoryForSchema;
exports.Factory = void 0;

var _lodash = _interopRequireDefault(require("lodash.get"));

var _lodash2 = _interopRequireDefault(require("lodash.set"));

var _faker = _interopRequireDefault(require("faker"));

var _simplSchema = _interopRequireDefault(require("simpl-schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * @name data-factory
 * @module
 * @author [@reactioncommerce]{@link https://github.com/reactioncommerce}
 * @see https://github.com/reactioncommerce/data-factory
 */
_simplSchema["default"].extendOptions(["mockValue"]);
/**
 * @const {Object} Factory - Factory object will hold scehma factory utils
 * for creating mock data based on the attached schema
 */


var Factory = {};
/**
 *
 * @name createMock
 * @function
 * @summary Creates a mock object of [faker]{@link https://github.com/marak/Faker.js} values based on a provided schema.
 * This function is heavely based on [simpl-schema-mockdoc]{@link https://github.com/CambridgeSoftwareLtd/simpl-schema-mockdoc} `getMockDoc` function.
 * @param {SimpleSchema} schema - A [SimpleSchema]{@link https://github.com/aldeed/simple-schema-js} instance.
 * @param {String} prefix - Mock value prefix.
 * @param {Boolean} addId - True to add `_id` to mock object.
 * @return {Object} - Mock object based on provided schema.
 */

exports.Factory = Factory;

var createMock = function createMock(schema, prefix, addId) {
  var docPrefix = prefix || "mock";
  var mockDoc = {};
  var model = schema._schema;
  Object.keys(model).forEach(function (key) {
    var fieldValue = null; // If field defined by parent

    var currentMockValue = (0, _lodash["default"])(mockDoc, "".concat(key.replace(".$", ".0")));

    if (currentMockValue !== undefined) {
      return;
    }

    var defField = (0, _lodash["default"])(model[key], "type.definitions[0]") || model[key];

    try {
      if (model[key].mockValue !== undefined) {
        fieldValue = model[key].mockValue;
      } else if (model[key].defaultValue !== undefined) {
        fieldValue = model[key].defaultValue;
      } else if (model[key].autoValue !== undefined) {
        fieldValue = model[key].autoValue.call({
          operator: null
        });
      } else if (Array.isArray(defField.allowedValues)) {
        fieldValue = defField.allowedValues[0]; // eslint-disable-line
      } else {
        throw new Error("Invalid");
      }
    } catch (err) {
      // Need 'defField' for field like: `key: Boolean`
      var fieldType = defField.type || defField;

      switch (fieldType) {
        case Date:
          fieldValue = new Date(_faker["default"].random.number() * 1000);
          break;

        case Number:
        case _simplSchema["default"].Integer:
          fieldValue = defField.min || defField.max || _faker["default"].random.number();
          break;

        case String:
          fieldValue = "".concat(docPrefix).concat(key.replace(/^\w/, function (_char) {
            return _char.toUpperCase();
          }));

          if (defField.regEx) {
            switch (String(defField.regEx)) {
              case String(String(_simplSchema["default"].RegEx.Email)):
              case String(String(_simplSchema["default"].RegEx.EmailWithTLD)):
                fieldValue = _faker["default"].internet.email();
                break;

              case String(_simplSchema["default"].RegEx.Domain):
              case String(_simplSchema["default"].RegEx.WeakDomain):
                fieldValue = "".concat(_faker["default"].internet.domainName()).concat(_faker["default"].internet.domainWord());
                break;

              case String(_simplSchema["default"].RegEx.IP):
              case String(_simplSchema["default"].RegEx.IPv4):
                fieldValue = _faker["default"].internet.ip();
                break;

              case String(_simplSchema["default"].RegEx.IPv6):
                fieldValue = _faker["default"].internet.ipv6();
                break;

              case String(_simplSchema["default"].RegEx.Url):
                fieldValue = _faker["default"].internet.url();
                break;

              case String(_simplSchema["default"].RegEx.Id):
                fieldValue = _faker["default"].random.alphaNumeric(17);
                break;

              case String(_simplSchema["default"].RegEx.ZipCode):
                fieldValue = _faker["default"].address.zipCode();
                break;

              case String(_simplSchema["default"].RegEx.Phone):
                fieldValue = key.match(/mobile/i) ? _faker["default"].phone.phoneNumber("074## ######") : _faker["default"].phone.phoneNumber("012## ######");
                break;

              default:
                break;
            }
          }

          break;

        case Boolean:
          fieldValue = defField.defaultValue !== undefined ? defField.defaultValue : _faker["default"].random["boolean"]();
          break;

        case Object:
          {
            fieldValue = {};
            break;
          }

        case Array:
          fieldValue = [];
          break;

        default:
          if (_simplSchema["default"].isSimpleSchema(fieldType)) {
            fieldValue = createMock(fieldType, prefix);
          }

          break;
      }
    }

    (0, _lodash2["default"])(mockDoc, key.replace(".$", ".0"), fieldValue);
  });

  if (addId) {
    mockDoc._id = _faker["default"].random.alphaNumeric(17);
  }

  return mockDoc;
};
/**
 * @name createFactoryForSchema
 * @function
 * @summary Creates Factory[propName] for building fake documents with the given schema.
 * @param {String} propName - The property name to add to the `Factory` object. This should match the
 *   schema variable's name.
 * @param {SimpleSchema} schema - A [SimpleSchema]{@link https://github.com/aldeed/simple-schema-js} instance.
 * @return {undefined} - No return.
 */


function createFactoryForSchema(propName, schema) {
  // eslint-disable-next-line
  if (Factory.hasOwnProperty(propName)) {
    throw new Error("Factory already has a \"".concat(propName, "\" property"));
  }

  Factory[propName] = {
    makeOne: function makeOne() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var index = arguments.length > 1 ? arguments[1] : undefined;
      var doc = createMock(schema, "mock", true);
      Object.keys(props).forEach(function (key) {
        var value = props[key];

        if (typeof value === "function") {
          doc[key] = value(index);
        } else {
          doc[key] = value;
        }
      });
      return doc;
    },
    makeMany: function makeMany(length, props) {
      var _this = this;

      return Array.from({
        length: length
      }).map(function (value, index) {
        return _this.makeOne(props, index);
      });
    }
  };
}